<%@ Template Language="C#" TargetLanguage="C#" Debug="False" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="DataSource" Optional="False" %>

<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="WheelMUD.CodeSmith.Utilities" %>

<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>
<%@ Import Namespace="WheelMUD.CodeSmith.Utilities" %>

<% 

string singularName = Inflector.MakeSingular(SourceTable.Name);

%>
// <auto-generated />
//-----------------------------------------------------------------------------
// <copyright file="<%=Inflector.ToTitleCase(singularName).Replace(" ","")%>Record.cs" company="WheelMUD Development Team">
//   Copyright (c) WheelMUD Development Team. See LICENSE.txt. This file is
//   subject to the Microsoft Public License. All other rights reserved.
// </copyright>
// <summary>
//   auto-generated by EntityRecord.cst on <% = DateTime.Now.ToString() %>
// </summary>
//-----------------------------------------------------------------------------

namespace WheelMUD.Data.Entities
{
    using System;
    using ServiceStack.DataAnnotations;

    /// <summary>Represents a single <%=singularName%> row in the <%=singularName%> table.</summary>
    public partial class <%=Inflector.ToTitleCase(singularName).Replace(" ","")%>Record 
    {
        <%  foreach(ColumnSchema column in SourceTable.Columns) { %>
        <%=CreatePropertyLine(column)%>
        <% } %>
    }
}

<script runat="template">

public string CreatePropertyLine(ColumnSchema column)
{
//    DatabaseInfo dbInfo = new DatabaseInfo();
//
//    DataTable table = dbInfo.GetTables();
//    DataTable columns = dbInfo.GetTableColumns(string.Empty,SourceTable.Name);
//    string primaryKeyName = dbInfo.GetTablePrimaryKey(string.Empty,SourceTable.Name);

    bool isId = false;
    StringBuilder line = new StringBuilder();
    
    if(column.Name == "ID")
    {
        line.AppendLine(attribute);
        isId = true;
    }
    
    if(isId)
    {
        line.Append("        public virtual ");
    }
    else
    {
        line.Append("public virtual ");
    }
    
    line.Append(CSharpAlias[column.SystemType.FullName]);
    line.Append(" ");
    line.Append(column.Name);
    line.Append(" { get; set; }");
    
    return line.ToString();
}

</script>