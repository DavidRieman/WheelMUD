<html>
<head></head>
<body lang=EN-US style="background:#282828; color:white">

<p><b><span style='font-size:16.0pt'>On-Line Creation (OLC) Story</span></b></p>


<p><b>Creating things</b>...<br />
Imagine this scenario: An administrator wants to make and spawn an interactive flashlight. (This admin has the necessary permissions to create unzoned things on the fly.)</p>

<div style="background:black; max-width:900px; padding:4px; font-size:12pt; font-family:monospace; white-space: pre-wrap">
> list item flashlight
No <span style='color:#aa55aa'>Thing</span> derived from the "<span style='color:#FFFF99'>item</span>" template was found with 'flashlight'.

> list thing flashlight
No <span style='color:#aa55aa'>Thing</span> was found with 'flashlight'.

> new item
<span style='color:#aa55aa'>Thing</span> <span style='color:silver'>item/123</span> created with properties derived from template "<span style='color:#FFFF99'>item</span>".
You are editing <span style='color:#aa55aa'>Thing</span> ID: <span style='color:silver'>item/123</span> (<span style='color:#ffff00'>unnamed</span>).

> properties   or   props   or   prop
<span style='color:#aa55aa'>Thing</span>. Derived from "<span style='color:#FFFF99'>item</span>" template.
Thing ID:    <span style='color:silver'>item/123</span>
Name:        (none)
Description: (none)
Keywords:    (none)
Zoned To:    <span style='color:silver'>(unzoned)</span>
Weight:      0
...
Behaviors:   [<span style='color:silver'>obtainable/127</span>]

> set name a flashlight
'Name' changed to: a flashlight

> set description
[enters multi-line edit mode, user types/edits a simple or multi-line description]
> A flashlight is here, just begging to be turned on and off.
> done
'Description' changed to:
A flashlight is here, just begging to be turned on and off.

> list behaviors Switch
Found 4 <span style='color:#aa55aa'>Behavior</span> classes with: 'Switch'
* <span style='color:#aa55aa'>OnOffSwitchBehavior</span>        provides "turn on" and "turn off" commands to toggle effects/behaviors.
* <span style='color:#aa55aa'>MobSwitchesSidesBehavior</span>   mobile can turn on its allies if specified conditions are met.
* <span style='color:#aa55aa'>FooBehavior</span>                blah blah switches foo.
* <span style='color:#aa55aa'>BarSwitchBehavior</span>          the thing gains bar behavior.

> add behaviors OnOffSwitchBehavior
<span style='color:#aa55aa'>OnOffSwitchBehavior</span> created with ID <span style='color:silver'>onOffSwitch/20</span> and default properties.
You are editing <span style='color:#aa55aa'>OnOffSwitchBehavior</span> ID <span style='color:silver'>onOffSwitch/20</span>.

> prop
<span style='color:#aa55aa'>OnOffSwitchBehavior</span>. Attached to <span style='color:silver'>item/123</span> (a flashlight).
Behavior ID:       <span style='color:silver'>onOffSwitch/20</span>
SwitchNoisiness:   10
OnCreatesEffect:   (none)
OnCreatesBehavior: (none)

> list effects light
Found 2 <span style='color:#aa55aa'>Effect</span> classes with keyword 'Light':
* <span style='color:#aa55aa'>LightingEffect</span>             the target thing becomes illuminated; contributes to light in parent.
* <span style='color:#aa55aa'>LightningStormEffect</span>       room is currently stormy; specify chances of lightning strikes, etc.

> add OnCreatesEffect LightingEffect
<span style='color:#aa55aa'>LightingEffect</span> created with ID <span style='color:silver'>lighting/45</span> and default properties.
You are editing <span style='color:#aa55aa'>LightingEffect</span> ID <span style='color:silver'>lighting/45</span>.

> prop
<span style='color:#aa55aa'>LightingEffect</span>. Attached to <span style='color:silver'>item/123</span> (a flashlight).
Effect ID:      45
LightColor:     white
LightMagnitude: 100
Duration:       infinite

> done
Done editing <span style='color:#aa55aa'>LightingEffect</span> ID <span style='color:silver'>lighting/45</span>.
You are editing <span style='color:#aa55aa'>OnOffSwitchBehavior</span> ID <span style='color:silver'>onOffSwitch/20</span>.

> done
Done editing <span style='color:#aa55aa'>OnOffSwitchBehavior</span> ID <span style='color:silver'>onOffSwitch/20</span>.
You are editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/123</span> (a flashlight).

> done
<span style='color:#ff0000'>Validation Failed</span> for <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/123</span> (a flashlight):
<span style='color:#ff0000'>(!)</span> Thing must have at least one keyword of length greater than 2.
<span style='color:#ff0000'>(!)</span> Thing name must contain at least one of its keywords.
<span style='color:#ff0000'>(!)</span> Thing description must contain at least one of its keywords.
You must either resolve these errors, or abandon your changes with `<span style='color:#AAFFAA'>done abandon</span>`.
As an admin, you may save this unfinished data as a template with `<span style='color:#AAFFAA'>save-template [new-template-name]</span>`.

You are editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/123</span> (a flashlight).

> set keywords flashlight
'Keywords' changed to: flashlight

> props
<span style='color:#aa55aa'>Thing</span>. Derived from "<span style='color:#FFFF99'>item</span>" template.
Thing ID:    <span style='color:silver'>item/123</span>
Name:        a <span style='color:#AAFFAA'>flashlight</span>
Description: A <span style='color:#AAFFAA'>flashlight</span> is here, just begging to be turned on and off.
Keywords:    flashlight
Zoned To:    <span style='color:silver'>(unzoned)</span>
Weight:      0
...
Behaviors:   [<span style='color:silver'>obtainable/127</span>, <span style='color:silver'>onOffSwitch/20</span>]

> done
Done editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/123</span> (a <span style='color:#CCFFCC'>flashlight</span>).  Returning to game.

> spawn item/123
You create a <span style='color:#CCFFCC'>flashlight</span> out of thin air.

> turn on flashlight
You turn a <span style='color:#CCFFCC'>flashlight</span> on.
The room is illuminated with a bright white light coming from a <span style='color:#CCFFCC'>flashlight</span>.


[others in the darkness don't see the 'turn on' action but see the result:]
You hear a switch click.
The room is now illuminated with a bright white light coming from a <span style='color:#CCFFCC'>flashlight</span> held by <span style='color:#AA66AA'>Karak</span>.
</div>


<br /><p><b>Enhancing a Zone</b>...<br />
Imagine this scenario: A builder wants to make a variant of the above flashlight, that automatically spawns in the inventory of a mob in her zone.</p>

<div style="background:black; max-width:900px; padding:4px; font-size:12pt; font-family:monospace; white-space: pre-wrap"> 
> list items flashlight
Found 1 "<span style='color:#FFFF99'>item</span>" with keyword 'flashlight':
* ID <span style='color:silver'>item/123</span>     a <span style='color:#CCFFCC'>flashlight</span>

> new item/123
You don't have permission to create anything in <span style='color:#aa55aa'>Zone</span>: <span style='color:silver'>(unzoned)</span>.

> edit zone NewNewMidgaard
<span style='color:#aa55aa'>Zone</span> context is now: <span style='color:silver'>zone/8</span> (<span style='color:#FFFF99'>NewNewMidgaard</span>).
You have full builder permissions in this zone.

> new item/123
<span style='color:#aa55aa'>Thing</span> <span style='color:silver'>item/1130</span> created with properties derived from <span style='color:silver'>item/123</span> (a <span style='color:#CCFFCC'>flashlight</span>).

> prop deep
<span style='color:#aa55aa'>Thing</span>. Derived from <span style='color:silver'>item/123</span> (<span style='color:#CCFFCC'>flashlight</span>).
Thing ID:    <span style='color:silver'>item/1130</span>
Name:        a <span style='color:#CCFFCC'>flashlight</span>
Description: A <span style='color:#CCFFCC'>flashlight</span> is here, just begging to be turned on and off.
Keywords:    flashlight
Zoned To:    <span style='color:silver'>zone/8</span> (<span style='color:#FFFF99'>NewNewMidgaard</span>)
Weight:      0
...
Behaviors:   [<span style='color:silver'>obtainable/1145</span>, <span style='color:silver'>onOffSwitch/50</span>]

<span style='color:#aa55aa'>ObtainableBehavior</span>.
Behavior ID: <span style='color:silver'>obtainable/1145</span>

<span style='color:#aa55aa'>OnOffSwitchBehavior</span>.
Behavior ID:       <span style='color:silver'>onOffSwitch/50</span>
SwitchNoisiness:   10
OnCreatesEffect:   (<span style='color:#aa55aa'>LightingEffect</span> <span style='color:silver'>lighting/88</span>)
OnCreatesBehavior: (none)

<span style='color:#aa55aa'>LightingEffect</span>.
Effect ID:      <span style='color:silver'>lighting/88</span>
LightColor:     white
LightMagnitude: 100
Duration:       infinite

> edit lighting/8
You do not have permission to edit that.

> edit lighting/88
You are editing LightingEffect ID 55.

> set lightcolor
The Light Color is any descriptive string you want, such as "hazy blue" or "green" or "blinking red". It can be shown to the user but the values do not have currently have any additional meaning in the code.
Values must be: a string.

> set lightcolor eery red
'LightColor' changed to: eery red

> set lightmagnitude dim
Invalid value for ‘LightMagnitude’.
Specify an integer between 0 and 150.

> set lightmagnitude 20
'LightMagnitude' changed to: 20

> prop
<span style='color:#aa55aa'>LightingEffect</span>.
Effect ID:      <span style='color:silver'>lighting/88</span>
LightColor:     eery red
LightMagnitude: 25
Duration:       infinite

> done all
Done editing <span style='color:#aa55aa'>LightingEffect</span> ID <span style='color:silver'>lighting/88</span>.
<span style='color:#ffff00'>Validation Warning</span> for: <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/1130</span> (a <span style='color:#CCFFCC'>flashlight</span>):
<span style='color:#ffff00'>(!)</span> Thing name should be unique; conflicts with <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/123</span> (a <span style='color:#CCFFCC'>flashlight</span>)
<span style='color:#ffff00'>(!)</span> Thing description should be unique; conflicts with <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/123</span> (a <span style='color:#CCFFCC'>flashlight</span>)

<span style='color:#BBBB00'>(!)</span> Congratulations! It's time to learn about your first builder validation message!
* Don't be ashamed. These help you finish valid, working game entities, with user-friendly results.
* Validation Errors must be fixed before you are able to save what you've just built.
* Sometimes a Validation Warning is justified though: Type `<span style='color:#AAFFAA'>done ignore-warnings</span>` in these cases.
* Type `<span style='color:#AAFFAA'>help olc-validation</span>` for more information about On-Line Creation validation assistance.
* One can review all outstanding validation warnings for the active zone with `<span style='color:#AAFFAA'>zone review</span>`.
* Type `<span style='color:#AAFFAA'>help zone</span>` to find more topics about zone-wide validation tools and submission processes.

You are editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/1130</span> (a <span style='color:#CCFFCC'>flashlight</span>).

> set name a metal flashlight
'Name' set to: a metal <span style='color:#CCFFCC'>flashlight</span>

> add keyword metal   or   set keywords flashlight metal
‘Keywords’ set to:  flashlight, metal

> set description A strange metal flashlight is here, with a prominent switch.
'Description' set to:
A strange <span style='color:#CCFFCC'>metal flashlight</span> is here, with a prominent switch.

> done
Done editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>item/1130</span> (a <span style='color:#CCFFCC'>metal flashlight</span>).
<span style='color:#ffff00'>(!)</span> The remaining <span style='color:#aa55aa'>Thing</span> budget for <span style='color:#aa55aa'>Zone</span> <span style='color:silver'>zone/8</span> (<span style='color:#FFFF99'>NewNewMidgaard</span>) is getting low at 25 left of 250.
    
<span style='color:#BBBB00'>(!)</span> Congratulations! You sure are a productive builder!
* Zones get budgets for total unique Things, to encourage scope limits and "quality over quantity".
* Type `<span style='color:#AAFFAA'>zone request increase</span>` to queue a request for an admin to bump up the active zone's limit.
* Type `<span style='color:#AAFFAA'>help zone</span>` to find further zone management help topics and details on related game policies.

> goto hunchbak
There is no 'hunchbak' anywhere you have permission to 'goto'.

> goto hunchback
<span style='color:#FF9900'>Dirty Back Room</span>
This is a dirty back room, filled with various old crates, boxes,
and littered with useless garbage.

A <span style='color:#FFCC99'>hunchback goblin</span> is here, muttering unintelligibly to himself.

> edit goblin
You are editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>mob/199</span> (a <span style='color:#FFCC99'>hunchback goblin</span>).

> prop deep
<span style='color:#aa55aa'>Thing</span>. Derived from "<span style='color:#FFFF99'>mob</span>" template.
Mobile ID:   <span style='color:silver'>mob/199</span>
Name:        a <span style='color:#FFCC99'>hunchback goblin</span>
Keywords:    goblin, hunchback
Race:        Goblin
Pronouns:    random [he/him/his | she/her/hers]
Strength:    14
Dexterity:   8
...
Spawners:    [<span style='color:silver'>randomWeaponSpanwer/100</span>, <span style='color:silver'>randomArmorSpawner/101</span>]
Behaviors:   (none)

<span style='color:#aa55aa'>RandomWeaponSpawner</span>.
Spawner ID:  100
MinLevel:    2
MaxLevel:    3
MinQuality:  1
MaxQuality:  12
MinHands:    1
MaxHands:    1
...

<span style='color:#aa55aa'>RandomArmorSpawner</span>.
Spawner ID:   101
MinLevel:     2
MaxLevel:     3
MinQuality:   1
MaxQuality:   12
MinSlots:     1
MaxSlots:     999
AllowedSlots: all
...

> add spawner NormalSpawner
<span style='color:#aa55aa'>NormalSpawner</span> created with ID <span style='color:silver'>normalSpawner/107</span> and default properties.
You are editing <span style='color:#aa55aa'>NormalSpawner</span> ID <span style='color:silver'>normalSpawner/107</span>.

> set SpawnsID item/1130
Set SpawnsID to: <span style='color:silver'>item/1130</span> (a <span style='color:#CCFFCC'>metal flashlight</span>).

> prop
<span style='color:#aa55aa'>NormalSpawner</span>.
Spawner ID:  <span style='color:silver'>normalSpawner/107</span>
SpawnsID:    [<span style='color:silver'>item/1130</span> (a <span style='color:#CCFFCC'>metal flashlight</span>)]
SpawnChance: 100
AutoEquip:   true

> done
Done editing <span style='color:#aa55aa'>NormalSpawner</span> ID <span style='color:silver'>107</span>.
You are editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>mob/199</span> (a <span style='color:#FFCC99'>hunchback goblin</span>).

> add behavior AggroBehavior
<span style='color:#aa55aa'>AggroBehavior</span> created with ID <span style='color:silver'>aggro/140</span> and default properties.
You are editing <span style='color:#aa55aa'>AggroBehavior</span> ID <span style='color:silver'>aggro/140</span>.

> done
Done editing <span style='color:#aa55aa'>AggroBehavior</span> ID <span style='color:silver'>aggro/140</span>.
You are editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>mob/199</span> (a <span style='color:#FFCC99'>hunchback goblin</span>).

> add behavior RandomCommandsBehavior
<span style='color:#aa55aa'>RandomCommandsBehavior</span> created with ID <span style='color:silver'>randomCommands/141</span> and default properties.
You are editing <span style='color:#aa55aa'>RandomCommandsBehavior</span> ID <span style='color:#aa55aa'>randomCommands/141</span>.

> prop
<span style='color:#aa55aa'>RandomCommandsBehavior</span>.
Behavior ID:       141
ChancePerSecond:   0
AvoidsLastCommand: true
Commands:          (none)

> set commands
[enter multi-line editor mode]
> turn flashlight on
> turn flashlight off
> done
'Commands' set to:
turn flashlight on
turn flashlight off

> done all
<span style='color:#ff0000'>Validation Failed</span> for <span style='color:#aa55aa'>RandomCommandsBehavior</span> ID <span style='color:silver'>randomCommands/141</span>:
<span style='color:#ff0000'>(!)</span> ChancePerSecond must be be between 1 and 100.

> set chancepersecond 25
'ChancePerSecond' set to: 25

> done all
Done editing <span style='color:#aa55aa'>RandomCommandsBehavior</span> ID <span style='color:silver'>randomCommands/141</span>.
Done editing <span style='color:#aa55aa'>Thing</span> ID <span style='color:silver'>mob/199</span> (a <span style='color:#FFCC99'>hunchback goblin</span>).  Returning to game.

> </div>


<br /><p><b>User Testing Mode</b>...<br />
Imagine this scenario: The builder above has switched to her "tester mode" or a separate "testing account" and...</p>

<div style="background:black; max-width:900px; padding:4px; font-size:12pt; font-family:monospace; white-space: pre-wrap">
> goto goblin

<span style='color:#FF9900'>Dirty Back Room</span>
You cannot see the room clearly.
Someone is here.

> [a few seconds pass]
You hear a switch click.
The room is now illuminated with a dim eerie red light coming from a <span style='color:#CCFFCC'>metal flashlight</span> held by a <span style='color:#FFCC99'>hunchback goblin</span>.

A <span style='color:#FFCC99'>hunchback goblin</span> attacks you!
A <span style='color:#FFCC99'>hunchback goblin</span>'s <span style='color:#CCFFCC'>rusty hatchet</span> misses you by inches.
</div>

<br /><div style="color:white; max-width:1000px; font-size:13pt">
    <p><b>Additional notes</b>:</p>
    <ul>
        <li>Keyword highlighting in the example helped the creator automatically notice a bug;  when setting the name to 'a metal flashlight' they noticed 'metal' wasn't highlighted and added the keyword to make the item more user-friendly.</li>
        <li>As we saw from editing the goblin, we likely want a way to show and edit game-system-specific details (like races, stats, and so on) with some shortcuts, even though those are not properties of the "Thing" class that is actually being edited. May need more thought and technical design for this. (Perhaps the editable properties on behaviors can propagate to editing the Thing, when the attribute has a unique name amongst its immediage Behaviors.)</li>
        <li>As we saw from "set lightcolor", it should be easy for any properties on Thing, Behaviors, Effects, and so on, to define what the help text should be through some sort of metadata, ideally defined in code close to where the property itself is defined. (Need to consider the technical aspects here further to design this well and inherently drive adoption. Perhaps Reflection and attributes to help guide valid editor value ranges, etc.)</li>
        <li>Pluggable validation rules could help enforce game balance issues, to be housed in game-specific DLLs. E.G. a level 2 mobile must have HP within an appropriate range for that challenge rating, etc.</li>
        <li>The OnOffSwitchBehavior does not exist today in WheelMUD and the properties on that example may suggest a poor design approach. It would take some additional thought to design it appropriately. This was just a contrived example to demonstrate the dynamic "building block" nature intended for OLC.</li>
        <li>List commands should be inherently flexible for plural, even for user-defined templates names. E.G. "list thing flashlight" should be equivalent to "list things flashlight", and "list item flashlight" should be equivalent to "list items flashlight" even though "item" is just a data-defined template of "a Thing that has an ObtainableBehavior".  Similarly "add keywords ..." and "add keyword ..." should be equivalent.</li>
        <li>Some very common data templates like "item" and "room" should be predefined by the initial world DB (RavenDB data), but additional templates (or "prefabs") could be stored by admins as appropriate for a given game system (like a "starship" template for a Thing with default Behaviors that make it behave like a starship) in a science-fiction MUD that features tons of them.</li>
        <li>Derivation data is persisted with each defined Thing or Template.</li>
        <li>When editing a pre-existing Thing or Template, we can tell the editor how much other stuff derives from it (and that updates to each may need to be performed manually after completion). The editor should be told a command to see what all derives from this.</li>
        <li>After updating a pre-existing Thing or Template, we should likewise remind the editor of everything that derives from it, to follow up with updating them as well. There may be some bulk prop finding and bulk prop editing commands we can design as well, when this sort of thing becomes a priority problem.</li>
        <li>While not displayed here, similar commands could operate on Thing Instances instead of Thing Templates. Thus an administrator with sufficient privileges could alter the stats of a single Thing instance permanently, or create one-time game-event-things/rewards with a unique description or whatnot on the fly.</li>
    </ul>
</div>
</body>
</html>
